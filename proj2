{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#                                             PART-1\n",
    "#####################################################################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read Fashion MNIST dataset\n",
    "import numpy as np\n",
    "import util_mnist_reader\n",
    "import pandas\n",
    "\n",
    "X_train, y_train = util_mnist_reader.load_mnist('/Users/prudhveer/Desktop/Into to Machine Learning/data_with_notebook/data/fashion', kind='train')\n",
    "X_test, y_test = util_mnist_reader.load_mnist('/Users/prudhveer/Desktop/Into to Machine Learning/data_with_notebook/data/fashion', kind='t10k')\n",
    "# Your code goes here . . .\n",
    "\n",
    "\n",
    "def sigmoid(x):\n",
    "    return 1 / (1 + np.exp(-x))\n",
    "\n",
    "def softmax(A):\n",
    "    expA = np.exp(A)\n",
    "    return expA / expA.sum(axis=1, keepdims=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9 0 0 ... 3 0 5]\n",
      "[9 2 1 ... 8 1 5]\n"
     ]
    }
   ],
   "source": [
    "X_train=np.asarray(X_train)\n",
    "X_train=X_train/255.0\n",
    "y_train=np.asarray(y_train)\n",
    "y_123=y_train\n",
    "y_train=np.asarray(y_train)\n",
    "y_train = pandas.get_dummies(y_train)\n",
    "y_train=np.asarray(y_train)\n",
    "#from keras.utils import np_utils\n",
    "#y_train = np_utils.to_categorical(y_train)\n",
    "#print(y_train)\n",
    "print(y_123)\n",
    "\n",
    "X_test=np.asarray(X_test)\n",
    "X_test=X_test/255.0\n",
    "y_test=np.asarray(y_test)\n",
    "y_456=y_test\n",
    "y_test=np.asarray(y_test)\n",
    "y_test = pandas.get_dummies(y_test)\n",
    "y_test=np.asarray(y_test)\n",
    "#y_test = to_categorical(y_test, 10)\n",
    "#y_test = np_utils.to_categorical(y_test)\n",
    "print (y_456)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 10)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=X_train\n",
    "T=y_train\n",
    "T.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss function value:  21.463904830558807\n",
      "Training Accuracy after  0  iterations :  15.110000000000001\n",
      "Loss function value:  5.6293639272374785\n",
      "Training Accuracy after  10  iterations :  52.99166666666667\n",
      "Loss function value:  4.95418857956858\n",
      "Training Accuracy after  20  iterations :  58.10333333333333\n",
      "Loss function value:  2.3766386049177117\n",
      "Training Accuracy after  30  iterations :  67.16333333333333\n",
      "Loss function value:  3.0437540842813893\n",
      "Training Accuracy after  40  iterations :  69.62\n",
      "Loss function value:  2.678812526473803\n",
      "Training Accuracy after  50  iterations :  70.125\n",
      "Loss function value:  1.595063154733021\n",
      "Training Accuracy after  60  iterations :  74.32333333333332\n",
      "Loss function value:  2.788878642002924\n",
      "Training Accuracy after  70  iterations :  66.86999999999999\n",
      "Loss function value:  2.3014587872692807\n",
      "Training Accuracy after  80  iterations :  71.595\n",
      "Loss function value:  2.1202969379281935\n",
      "Training Accuracy after  90  iterations :  74.46000000000001\n",
      "Loss function value:  2.4009786421665282\n",
      "Training Accuracy after  100  iterations :  74.19166666666666\n",
      "Loss function value:  1.923610917677939\n",
      "Training Accuracy after  110  iterations :  73.10166666666666\n",
      "Loss function value:  2.318679758839456\n",
      "Training Accuracy after  120  iterations :  73.89\n",
      "Loss function value:  1.845769196387244\n",
      "Training Accuracy after  130  iterations :  74.52499999999999\n",
      "Loss function value:  2.3884188460175992\n",
      "Training Accuracy after  140  iterations :  75.05833333333334\n"
     ]
    }
   ],
   "source": [
    "samples = X.shape[0] \n",
    "features = X.shape[1] \n",
    "hidden_nodes = 512\n",
    "classes = 10\n",
    "\n",
    "# randomly initialize weights\n",
    "W1 = np.random.randn(features, hidden_nodes)\n",
    "b1 = np.random.randn(hidden_nodes)\n",
    "W2 = np.random.randn(hidden_nodes, classes)\n",
    "b2 = np.random.randn(classes)\n",
    "\n",
    "alpha = 10e-6\n",
    "costs = []\n",
    "accuracy= []\n",
    "for epoch in range(150):\n",
    "    \n",
    "    #####Front Propagation########\n",
    "    A = sigmoid(X.dot(W1) + b1) \n",
    "    Y = softmax(A.dot(W2) + b2) \n",
    "    ######Back Propagation ############\n",
    "    delta2 = (Y - T)\n",
    "    delta1 = ((delta2).dot(W2.T) * A * (1 - A))\n",
    "\n",
    "    W2 -= alpha * A.T.dot(delta2)\n",
    "    b2 -= alpha * (delta2).sum(axis=0)\n",
    "\n",
    "    W1 -= alpha * X.T.dot(delta1)\n",
    "    b1 -= alpha * (delta1).sum(axis=0)\n",
    "\n",
    "    if epoch % 10 == 0:\n",
    "        loss = -1/60000*np.sum(T * np.log(Y))\n",
    "        print('Loss function value: ', loss)\n",
    "        costs.append(loss)\n",
    "        #print(Y)\n",
    "        predictions = np.argmax(Y, axis=1)\n",
    "        #print(predictions)\n",
    "        accurac=sum(y_123==predictions)/60000\n",
    "        accuracy.append(accurac)\n",
    "     \n",
    "        print('Training Accuracy after ',epoch,' iterations : ',accurac*100)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "plt.plot(accuracy)\n",
    "plt.title(\"Accuracy vs Number of Iterations\")\n",
    "plt.xlabel(\"Number of Iterations * 10\")\n",
    "plt.ylabel(\"accuracy\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.plot(costs)\n",
    "plt.title(\"Costs vs Number of Iterations\")\n",
    "plt.xlabel(\"Number of Iterations * 10\")\n",
    "plt.ylabel(\"Costs\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of test samples: 10000\n",
      "Test Accuracy with the current Model: 74.53\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def forwardpropogation(X,W1,b1,W2,b2):\n",
    "    A = sigmoid(X.dot(W1) + b1) \n",
    "    Y = softmax(A.dot(W2) + b2) \n",
    "    return A,Y  \n",
    "\n",
    "def cal_acc(actual_y,predictions,n):\n",
    "    acc=sum(actual_y==predictions)/n\n",
    "    return acc\n",
    "\n",
    "\n",
    "test_samples = X_test.shape[0]\n",
    "print(\"Number of test samples:\",test_samples)\n",
    "A_test,Y_tests=forwardpropogation(X_test,W1,b1,W2,b2)\n",
    "pred1 = np.argmax(Y_tests, axis=1)\n",
    "acc=cal_acc(y_456,pred1,test_samples)\n",
    "print(\"Test Accuracy with the current Model:\", acc*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confused_matrix = confusion_matrix(y_456.flatten(), pred1.flatten())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[880,  16,  19,  25,  18,   7,  11,   1,  23,   0],\n",
       "       [  9, 933,   4,  25,  22,   1,   2,   1,   3,   0],\n",
       "       [ 45,  12, 469,  12, 412,   4,  22,   0,  24,   0],\n",
       "       [114,  43,   8, 671, 136,   6,   7,   2,  12,   1],\n",
       "       [  5,   6,  30,   6, 925,   6,  10,   0,  12,   0],\n",
       "       [  3,   0,   0,   2,   3, 838,   0,  71,  26,  57],\n",
       "       [288,  17,  91,  19, 395,  11, 127,   1,  50,   1],\n",
       "       [  0,   0,   0,   0,   0,  88,   0, 842,   8,  62],\n",
       "       [ 25,   4,   6,  12,  22,  22,   3,  17, 886,   3],\n",
       "       [  2,   0,   0,   1,   1,  41,   1,  66,   6, 882]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confused_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#                                          PART 2 \n",
    "#####################################################################################################################\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 784)\n",
      "(60000,)\n",
      "(10000, 784)\n",
      "(10000,)\n",
      "(60000, 10)\n",
      "(10000, 10)\n"
     ]
    }
   ],
   "source": [
    "# Importing the libraries\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "# Read Fashion MNIST dataset\n",
    "\n",
    "import util_mnist_reader\n",
    "X_train, y_train = util_mnist_reader.load_mnist('/Users/prudhveer/Desktop/Into to Machine Learning/data_with_notebook/data/fashion', kind='train')\n",
    "X_test, y_test = util_mnist_reader.load_mnist('/Users/prudhveer/Desktop/Into to Machine Learning/data_with_notebook/data/fashion', kind='t10k')\n",
    "\n",
    "# Your code goes here . . .\n",
    "print(X_train.shape)\n",
    "print(y_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_test.shape)\n",
    "X_train[0].shape\n",
    "X_train = X_train.astype('float32')\n",
    "X_train /= 255.0\n",
    "X_test = X_test.astype('float32')\n",
    "X_test /= 255.0\n",
    "from keras.utils.np_utils import to_categorical\n",
    "y_train = to_categorical(y_train,10)\n",
    "print(y_train.shape)\n",
    "y_test = to_categorical(y_test,10)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_9\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_20 (Dense)             (None, 512)               401920    \n",
      "_________________________________________________________________\n",
      "dense_21 (Dense)             (None, 256)               131328    \n",
      "_________________________________________________________________\n",
      "dense_22 (Dense)             (None, 10)                2570      \n",
      "=================================================================\n",
      "Total params: 535,818\n",
      "Trainable params: 535,818\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Importing Keras libraries \n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "# Initialising the NN\n",
    "classifier = Sequential()\n",
    "\n",
    "# Adding input layer and  first hidden layer\n",
    "classifier.add(Dense(512,activation = 'relu',input_shape=(784,)))\n",
    "# Adding second hidden layer\n",
    "classifier.add(Dense(256,activation = 'relu'))\n",
    "# Adding  output layer\n",
    "classifier.add(Dense(10,activation = 'softmax'))\n",
    "# Compiling NN\n",
    "classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics=['accuracy'])\n",
    "classifier.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/30\n",
      "60000/60000 [==============================] - 31s 520us/step - loss: 0.4744 - accuracy: 0.8275 - val_loss: 0.4019 - val_accuracy: 0.8574\n",
      "Epoch 2/30\n",
      "60000/60000 [==============================] - 34s 571us/step - loss: 0.3653 - accuracy: 0.8665 - val_loss: 0.3884 - val_accuracy: 0.8603\n",
      "Epoch 3/30\n",
      "60000/60000 [==============================] - 35s 588us/step - loss: 0.3312 - accuracy: 0.8775 - val_loss: 0.3822 - val_accuracy: 0.8668\n",
      "Epoch 4/30\n",
      "60000/60000 [==============================] - 34s 575us/step - loss: 0.3074 - accuracy: 0.8864 - val_loss: 0.3919 - val_accuracy: 0.8600\n",
      "Epoch 5/30\n",
      "60000/60000 [==============================] - 35s 584us/step - loss: 0.2935 - accuracy: 0.8907 - val_loss: 0.3637 - val_accuracy: 0.8774\n",
      "Epoch 6/30\n",
      "60000/60000 [==============================] - 36s 594us/step - loss: 0.2809 - accuracy: 0.8949 - val_loss: 0.3818 - val_accuracy: 0.8753\n",
      "Epoch 7/30\n",
      "60000/60000 [==============================] - 36s 599us/step - loss: 0.2709 - accuracy: 0.9001 - val_loss: 0.3849 - val_accuracy: 0.8721\n",
      "Epoch 8/30\n",
      "60000/60000 [==============================] - 36s 599us/step - loss: 0.2633 - accuracy: 0.9019 - val_loss: 0.3552 - val_accuracy: 0.8824\n",
      "Epoch 9/30\n",
      "60000/60000 [==============================] - 36s 598us/step - loss: 0.2544 - accuracy: 0.9050 - val_loss: 0.4185 - val_accuracy: 0.8765\n",
      "Epoch 10/30\n",
      "60000/60000 [==============================] - 36s 600us/step - loss: 0.2493 - accuracy: 0.9063 - val_loss: 0.3739 - val_accuracy: 0.8768\n",
      "Epoch 11/30\n",
      "60000/60000 [==============================] - 36s 603us/step - loss: 0.2414 - accuracy: 0.9101 - val_loss: 0.3943 - val_accuracy: 0.8758\n",
      "Epoch 12/30\n",
      "60000/60000 [==============================] - 36s 594us/step - loss: 0.2359 - accuracy: 0.9112 - val_loss: 0.3927 - val_accuracy: 0.8786\n",
      "Epoch 13/30\n",
      "60000/60000 [==============================] - 36s 594us/step - loss: 0.2298 - accuracy: 0.9141 - val_loss: 0.3956 - val_accuracy: 0.8842\n",
      "Epoch 14/30\n",
      "60000/60000 [==============================] - 36s 600us/step - loss: 0.2260 - accuracy: 0.9148 - val_loss: 0.3984 - val_accuracy: 0.8812\n",
      "Epoch 15/30\n",
      "60000/60000 [==============================] - 36s 598us/step - loss: 0.2215 - accuracy: 0.9174 - val_loss: 0.4206 - val_accuracy: 0.8858\n",
      "Epoch 16/30\n",
      "60000/60000 [==============================] - 36s 593us/step - loss: 0.2164 - accuracy: 0.9191 - val_loss: 0.4094 - val_accuracy: 0.8856\n",
      "Epoch 17/30\n",
      "60000/60000 [==============================] - 36s 595us/step - loss: 0.2148 - accuracy: 0.9201 - val_loss: 0.4361 - val_accuracy: 0.8827\n",
      "Epoch 18/30\n",
      "60000/60000 [==============================] - 36s 606us/step - loss: 0.2101 - accuracy: 0.9213 - val_loss: 0.4860 - val_accuracy: 0.8842\n",
      "Epoch 19/30\n",
      "60000/60000 [==============================] - 36s 600us/step - loss: 0.2088 - accuracy: 0.9221 - val_loss: 0.4248 - val_accuracy: 0.8816\n",
      "Epoch 20/30\n",
      "60000/60000 [==============================] - 36s 606us/step - loss: 0.2024 - accuracy: 0.9255 - val_loss: 0.4747 - val_accuracy: 0.8876\n",
      "Epoch 21/30\n",
      "60000/60000 [==============================] - 36s 603us/step - loss: 0.2026 - accuracy: 0.9259 - val_loss: 0.5333 - val_accuracy: 0.8807\n",
      "Epoch 22/30\n",
      "60000/60000 [==============================] - 37s 610us/step - loss: 0.1980 - accuracy: 0.9260 - val_loss: 0.4929 - val_accuracy: 0.8837\n",
      "Epoch 23/30\n",
      "60000/60000 [==============================] - 36s 602us/step - loss: 0.1949 - accuracy: 0.9270 - val_loss: 0.5300 - val_accuracy: 0.8837\n",
      "Epoch 24/30\n",
      "60000/60000 [==============================] - 36s 604us/step - loss: 0.1966 - accuracy: 0.9269 - val_loss: 0.5012 - val_accuracy: 0.8887\n",
      "Epoch 25/30\n",
      "60000/60000 [==============================] - 36s 604us/step - loss: 0.1892 - accuracy: 0.9293 - val_loss: 0.5364 - val_accuracy: 0.8872\n",
      "Epoch 26/30\n",
      "60000/60000 [==============================] - 36s 602us/step - loss: 0.1912 - accuracy: 0.9287 - val_loss: 0.5675 - val_accuracy: 0.8805\n",
      "Epoch 27/30\n",
      "60000/60000 [==============================] - 36s 604us/step - loss: 0.1910 - accuracy: 0.9291 - val_loss: 0.6069 - val_accuracy: 0.8876\n",
      "Epoch 28/30\n",
      "60000/60000 [==============================] - 36s 605us/step - loss: 0.1824 - accuracy: 0.9315 - val_loss: 0.6471 - val_accuracy: 0.8817\n",
      "Epoch 29/30\n",
      "60000/60000 [==============================] - 36s 594us/step - loss: 0.1858 - accuracy: 0.9324 - val_loss: 0.6339 - val_accuracy: 0.8833\n",
      "Epoch 30/30\n",
      "60000/60000 [==============================] - 36s 607us/step - loss: 0.1830 - accuracy: 0.9322 - val_loss: 0.6199 - val_accuracy: 0.8849\n"
     ]
    }
   ],
   "source": [
    "# Fitting the ANN to the Training set\n",
    "history = classifier.fit(X_train, y_train, batch_size = 10, epochs = 30, validation_data = (X_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.title(\"Accuracy vs Number of Iterations\")\n",
    "plt.xlabel(\"Number of Iterations * 10\")\n",
    "plt.ylabel(\"accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title(\"Accuracy vs val_accuracy\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 1s 52us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.5687370408773422, 0.8812999725341797]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score = classifier.evaluate(X_test,y_test)\n",
    "score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = classifier.predict(X_test)\n",
    "y_pred = (y_pred > 0.5)\n",
    "from sklearn.metrics import confusion_matrix\n",
    "confused_matrix = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[826,   4,  12,  39,   1,   1, 112,   0,   5,   0],\n",
       "       [  6, 973,   0,  14,   6,   0,   0,   0,   1,   0],\n",
       "       [ 49,   1, 830,  14,  68,   0,  37,   0,   1,   0],\n",
       "       [ 31,   5,   6, 940,   6,   0,  10,   0,   2,   0],\n",
       "       [ 40,   0, 112,  61, 765,   0,  21,   0,   1,   0],\n",
       "       [  1,   0,   0,   1,   0, 965,   0,  15,   0,  18],\n",
       "       [174,   0,  95,  36,  93,   0, 600,   0,   2,   0],\n",
       "       [  0,   0,   0,   0,   0,  10,   0, 973,   0,  17],\n",
       "       [ 22,   1,   1,   4,   1,   3,   2,   3, 963,   0],\n",
       "       [  1,   0,   0,   0,   0,   5,   1,  48,   0, 945]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confused_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#                                          PART 3 \n",
    "#####################################################################################################################\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the libraries\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read Fashion MNIST dataset\n",
    "\n",
    "import util_mnist_reader\n",
    "X_train, y_train = util_mnist_reader.load_mnist('/Users/prudhveer/Desktop/Into to Machine Learning/data_with_notebook/data/fashion', kind='train')\n",
    "X_test, y_test = util_mnist_reader.load_mnist('/Users/prudhveer/Desktop/Into to Machine Learning/data_with_notebook/data/fashion', kind='t10k')\n",
    "abc = X_test\n",
    "# Your code goes here . . ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the Keras libraries \n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D\n",
    "from keras.layers import MaxPooling2D\n",
    "from keras.layers import Flatten\n",
    "from keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_8\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_5 (Conv2D)            (None, 27, 27, 32)        160       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_5 (MaxPooling2 (None, 13, 13, 32)        0         \n",
      "_________________________________________________________________\n",
      "flatten_5 (Flatten)          (None, 5408)              0         \n",
      "_________________________________________________________________\n",
      "dense_18 (Dense)             (None, 256)               1384704   \n",
      "_________________________________________________________________\n",
      "dense_19 (Dense)             (None, 10)                2570      \n",
      "=================================================================\n",
      "Total params: 1,387,434\n",
      "Trainable params: 1,387,434\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "classifier1 = Sequential()\n",
    "# Convolution\n",
    "classifier1.add(Conv2D(32, (2, 2), input_shape = (28, 28, 1), activation = 'relu'))\n",
    "# Pooling\n",
    "classifier1.add(MaxPooling2D(pool_size = (2, 2)))\n",
    "# Flattening\n",
    "classifier1.add(Flatten())\n",
    "# Full connection\n",
    "classifier1.add(Dense(256,activation = 'relu',input_shape=(784,)))\n",
    "classifier1.add(Dense(10,activation = 'softmax'))\n",
    "# Compiling CNN\n",
    "classifier1.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics=['accuracy'])\n",
    "classifier1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/10\n",
      "60000/60000 [==============================] - 107s 2ms/step - loss: 0.3721 - accuracy: 0.8660 - val_loss: 0.3207 - val_accuracy: 0.8803\n",
      "Epoch 2/10\n",
      "60000/60000 [==============================] - 108s 2ms/step - loss: 0.2540 - accuracy: 0.9066 - val_loss: 0.2738 - val_accuracy: 0.8971\n",
      "Epoch 3/10\n",
      "60000/60000 [==============================] - 111s 2ms/step - loss: 0.2048 - accuracy: 0.9244 - val_loss: 0.2785 - val_accuracy: 0.9015\n",
      "Epoch 4/10\n",
      "60000/60000 [==============================] - 112s 2ms/step - loss: 0.1702 - accuracy: 0.9373 - val_loss: 0.2788 - val_accuracy: 0.9044\n",
      "Epoch 5/10\n",
      "60000/60000 [==============================] - 100s 2ms/step - loss: 0.1397 - accuracy: 0.9470 - val_loss: 0.3047 - val_accuracy: 0.9009\n",
      "Epoch 6/10\n",
      "60000/60000 [==============================] - 105s 2ms/step - loss: 0.1149 - accuracy: 0.9570 - val_loss: 0.3034 - val_accuracy: 0.9095\n",
      "Epoch 7/10\n",
      "60000/60000 [==============================] - 109s 2ms/step - loss: 0.0947 - accuracy: 0.9642 - val_loss: 0.3485 - val_accuracy: 0.9044\n",
      "Epoch 8/10\n",
      "60000/60000 [==============================] - 107s 2ms/step - loss: 0.0767 - accuracy: 0.9715 - val_loss: 0.3682 - val_accuracy: 0.9046\n",
      "Epoch 9/10\n",
      "60000/60000 [==============================] - 117s 2ms/step - loss: 0.0653 - accuracy: 0.9759 - val_loss: 0.3892 - val_accuracy: 0.9096\n",
      "Epoch 10/10\n",
      "60000/60000 [==============================] - 116s 2ms/step - loss: 0.0542 - accuracy: 0.9800 - val_loss: 0.4575 - val_accuracy: 0.9031\n"
     ]
    }
   ],
   "source": [
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.utils import np_utils\n",
    "\n",
    "X_train = X_train.reshape((X_train.shape[0], 28, 28, 1))\n",
    "X_test = X_test.reshape((X_test.shape[0], 28, 28, 1))\n",
    "\n",
    "X_test = X_test.astype('float32')\n",
    "X_test /= 255.0\n",
    "\n",
    "X_train = X_train.astype('float32')\n",
    "X_train /= 255.0\n",
    "\n",
    "y_train = np_utils.to_categorical(y_train, 10)\n",
    "y_test = np_utils.to_categorical(y_test, 10)\n",
    "\n",
    "history = classifier1.fit(X_train, y_train, batch_size = 10, epochs = 10 , validation_data = (X_test,y_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.title(\"Accuracy vs Number of Iterations\")\n",
    "plt.xlabel(\"Number of Iterations * 10\")\n",
    "plt.ylabel(\"accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title(\"accuracy vs val_accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = classifier1.predict(X_test)\n",
    "y_pred = (y_pred > 0.5)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "confused_matrix = matrix = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[819,   0,   7,  23,   3,   1, 142,   0,   5,   0],\n",
       "       [  1, 979,   0,  13,   2,   0,   4,   0,   1,   0],\n",
       "       [ 23,   1, 824,  10,  65,   0,  76,   0,   1,   0],\n",
       "       [ 19,   7,   8, 917,  14,   0,  30,   0,   5,   0],\n",
       "       [ 12,   2,  40,  40, 849,   1,  54,   0,   2,   0],\n",
       "       [  2,   0,   0,   0,   0, 989,   0,   1,   0,   8],\n",
       "       [ 87,   3,  45,  16,  43,   0, 796,   0,   9,   1],\n",
       "       [  3,   0,   0,   0,   0,  72,   0, 902,   0,  23],\n",
       "       [  5,   0,   0,   5,   0,   4,   5,   0, 981,   0],\n",
       "       [  1,   0,   0,   0,   0,   7,   0,  22,   3, 967]])"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confused_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
